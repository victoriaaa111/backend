name: Build and deploy

on:
  push:
    branches:
      - '*'

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  DOCKERHUB_REPO_NAME: ${{ secrets.DOCKERHUB_REPO_NAME }}

  IMAGE_NAME: api
  IMAGE_TAG: ${{ github.sha }}

  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_KEY: ${{ secrets.EC2_KEY }}

jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build image
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker save -o /tmp/$IMAGE_NAME.tar $IMAGE_NAME:$IMAGE_TAG

      - name: Upload artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}
          path: /tmp/${{ env.IMAGE_NAME }}.tar
          if-no-files-found: error
          overwrite: true

  push:
    name: Push image
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}
          path: /tmp

      - name: Load image
        run: docker load --input /tmp/$IMAGE_NAME.tar

      - name: Log in to DockerHub
        run: echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

      - name: Tag and push image
        run: |
          docker tag $IMAGE_NAME:$IMAGE_TAG $DOCKERHUB_USERNAME/$DOCKERHUB_REPO_NAME:$IMAGE_TAG
          docker push $DOCKERHUB_USERNAME/$DOCKERHUB_REPO_NAME:$IMAGE_TAG

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: push

    steps:
      - name: Execute remote commands
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          script_stop: true
          script: |
            docker pull ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_NAME }}:${{ env.IMAGE_TAG }}
            docker stop ${{ env.DOCKERHUB_REPO_NAME }} || true
            docker rm ${{ secrets.DOCKERHUB_REPO_NAME }} || true
            docker run -d --name ${{ env.DOCKERHUB_REPO_NAME }} -p 80:3000 ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_NAME }}:${{ env.IMAGE_TAG }}
            yes | docker system prune